import time
import schedule
from datetime import datetime
from notification_bot import NotificationBot

class Sistema24_7:
    def __init__(self):
        self.bot = NotificationBot()
        self.contador_verificacoes = 0
        
    def verificar_sistema(self):
        """Verifica√ß√£o peri√≥dica do sistema"""
        self.contador_verificacoes += 1
        
        status = f"""
üîÑ VERIFICA√á√ÉO DO SISTEMA #{self.contador_verificacoes}

‚úÖ Todos os sistemas operando normalmente
üìä Verifica√ß√µes realizadas: {self.contador_verificacoes}
‚è∞ √öltima verifica√ß√£o: {datetime.now().strftime('%H:%M:%S')}
üîß Status: OPERACIONAL 24/7
        """.strip()
        
        self.bot.info(status, "admin")
        
        # A cada 10 verifica√ß√µes, notificar o grupo tamb√©m
        if self.contador_verificacoes % 10 == 0:
            self.bot.grupo(
                "RELAT√ìRIO PERI√ìDICO üìä",
                f"Sistema est√° operando continuamente!\n"
                f"Verifica√ß√µes realizadas: {self.contador_verificacoes}\n"
                f"Status: ‚úÖ OPERACIONAL",
                "info"
            )
    
    def notificar_evento(self, titulo, mensagem, tipo="info"):
        """Notifica sobre eventos espec√≠ficos"""
        self.bot.grupo(titulo, mensagem, tipo)
        self.bot.info(f"Evento: {titulo}\n{mensagem}")
    
    def monitorar_continuamente(self):
        """Inicia o monitoramento cont√≠nuo"""
        print("üöÄ INICIANDO SISTEMA 24/7...")
        
        # Notifica√ß√£o inicial
        self.bot.sucesso(
            "SISTEMA 24/7 INICIADO! üéâ\n\n"
            "üìä Modo: Monitoramento Cont√≠nuo\n"
            "‚è∞ In√≠cio: " + datetime.now().strftime('%d/%m/%Y %H:%M:%S') + "\n"
            "üîî Notifica√ß√µes autom√°ticas ativas"
        )
        
        self.bot.grupo(
            "SISTEMA 24/7 ATIVADO üöÄ",
            "‚úÖ Sistema de monitoramento iniciado!\n\n"
            "üì± Este grupo receber√°:\n"
            "‚Ä¢ Verifica√ß√µes peri√≥dicas\n"
            "‚Ä¢ Alertas importantes\n"
            "‚Ä¢ Status do sistema\n"
            "‚Ä¢ Notifica√ß√µes em tempo real\n\n"
            "‚ö° Modo: Opera√ß√£o Cont√≠nua 24/7",
            "success"
        )
        
        print("‚úÖ Sistema 24/7 inicializado!")
        
        # Agendar verifica√ß√µes autom√°ticas
        schedule.every(5).minutes.do(self.verificar_sistema)
        
        # Verifica√ß√£o inicial
        self.verificar_sistema()
        
        # Loop infinito para manter o sistema rodando
        try:
            while True:
                schedule.run_pending()
                time.sleep(1)
        except KeyboardInterrupt:
            self.bot.alerta("Sistema 24/7 interrompido manualmente")
            print("‚èπÔ∏è Sistema interrompido")

# Sistema de exemplo para propriedades
class SistemaPropriedades(Sistema24_7):
    def notificar_verificacao_propriedade(self, endereco, resultado):
        """Notifica sobre verifica√ß√£o de propriedade"""
        mensagem = f"""
üè† VERIFICA√á√ÉO DE PROPRIEDADE

üìã Endere√ßo: {endereco}
‚úÖ Resultado: {resultado}
‚è∞ Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
        """.strip()
        
        self.notificar_evento("NOVA VERIFICA√á√ÉO üè†", mensagem, "info")

if __name__ == "__main__":
    print("üîß Iniciando sistema de propriedades 24/7...")
    sistema = SistemaPropriedades()
    sistema.monitorar_continuamente()